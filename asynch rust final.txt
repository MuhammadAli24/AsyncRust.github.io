Asynchronous Rust

Asynch programming is a tool to optimize the application performance. Async (or asynchronous) programming is a technique to run simultaneous operations in any applications. 
Apart from the nature of the application a web server, a database or an operating system, using async programing you can get most out of the underlying hardware, thus it optimizes it.
Asynchronous Rust allows us to run multiple tasks concurrently on the same Operating System thread. Since threads are designed to run multiple different tasks at once. However, they also have some limitations
There's a lot of overhead in switching between different threads and sharing data between them. Even a thread which, if is not doing anything, uses up valuable system resources
Overall, asynchronous applications have the potential to be much faster and use fewer resources than a corresponding threaded implementation, which makes them very useful for the optimization.
Threads are basically supported by the operating system and does not need any programming tool.
Any function can create a thread. Moreover a function that uses threads is as easy to call as the normal functions, whenever asynchronous functions need support from language or libraries
In Rust, async function creates an asynchronous function which returns a “Future”. 
To execute the body of the function, the returned “Future” must be operated. In fact  traditional threaded applications can be quite effective
The increased complexity of the asynchronous programming model isn't an issue, it's important to consider whether your application would be better served by using a simpler threaded model or to use the asynchronous Rust.
Asynchronous Rust ecosystem has undergone a lot of evolution over time, so it can be hard to know what tools to use, what libraries to invest in, or what documentation to read. However, the Future trait inside the standard library and the async/await language feature has recently been stabilized.
The ecosystem as a whole is therefore in the midst of migrating to the newly-stabilized API. At the moment, however, the ecosystem is still undergoing rapid development and the asynchronous Rust experience is unpolished
Most libraries use the 0.1 definitions of the futures crate, meaning that to interoperate developers frequently need to reach for the compact functionality from the 0.3 futures crate. The async/await language feature is still new. Important extensions like async fn syntax in trait methods need to be implemented. Current compiler error messages can be difficult to parse. In short, Rust is  on its way to offer much in the future including the asynchronous programming.
